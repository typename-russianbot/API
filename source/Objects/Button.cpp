#include "../../includes/Objects/Button.h"

// TODO - Resources //
//////////////////////////////////////////////////////////////////////////////////////////
//&* @public: Button(const string, const Color, const Vector2f)
Button::Button(const string nString, const Color nBackground,
               const Vector2f nPosition)
    : Textbox(nString, nBackground, nPosition), highlight_color(yellow),
      button_highlighted(false) {
  return;
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//&* @public: ~Button(void)
Button::~Button(void) { return; }
//////////////////////////////////////////////////////////////////////////////////////////

// TODO - Toggles //
//////////////////////////////////////////////////////////////////////////////////////////
//&* @public: toggleHighlight(const bool)
void Button::toggleHighlight(const bool toggle) {
  if (toggle) {
    button_highlighted = true;
    background.setOutlineColor(highlight_color);
  } else {
    button_highlighted = false;
    background.setOutlineColor(transparent);
  }

  return;
}
//////////////////////////////////////////////////////////////////////////////////////////

// TODO - Mutators //
//////////////////////////////////////////////////////////////////////////////////////////
//&* @public: setHighlightColor(const Color)
void Button::setHighlightColor(const Color color) {
  highlight_color = color;
  return;
}
//////////////////////////////////////////////////////////////////////////////////////////

// TODO - Accessors //
//////////////////////////////////////////////////////////////////////////////////////////
//&* @public: isHighlighted(void)
bool Button::isHighlighted(void) {
  if (button_highlighted)
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//&* @public: inLocalBounds(const Vector2f)
bool Button::inLocalBounds(const Vector2f mousePos) {
  if (background.getGlobalBounds().contains(mousePos))
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////////////