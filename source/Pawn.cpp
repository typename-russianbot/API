#include "../includes/Objects/Pawn.h"

// TODO - Resources //
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: Pawn(const Color, const unsigned int)
Pawn::Pawn(const Color color, const unsigned int size)
    : object(static_cast<float>(size)), pawn_color(color),
      outline_color(transparent), highlight_color(yellow),
      pawn_higlighted(false), pawn_visible(true), outline_visible(false) {

  //&* Init Pawn
  object.setPointCount(object.getRadius() * 2.f);
  object.setOrigin({object.getRadius() / 2.f, object.getRadius() / 2.f});
  object.setPosition({_DisplayWidth / 2.f, _DisplayHeight / 2.f});
  object.setFillColor(pawn_color);
  object.setOutlineColor(outline_color);
  object.setOutlineThickness(3.f);

  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: ~Pawn(void)
Pawn::~Pawn(void) { return; }
////////////////////////////////////////////////////////////////////////////////////////

// TODO - Functions //
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: draw(RenderWindow&)
void Pawn::draw(RenderWindow &window) {
  if (isVisible()) {
    window.draw(object);
  }

  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: move(const Vector2f)
void Pawn::move(const Vector2f position) {
  object.move(position);
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: resize(const unsigned int)
void Pawn::resize(const unsigned int size) {
  object.setRadius(static_cast<float>(size));
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: invert(void)
void Pawn::invert(void) {
  //&* @note: swap trackers
  Color temp = pawn_color;
  pawn_color = outline_color;
  outline_color = temp;

  //&* @note: update object colors
  object.setFillColor(pawn_color);
  object.setOutlineColor(outline_color);

  return;
}
////////////////////////////////////////////////////////////////////////////////////////

// TODO - Toggles //
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: toggleOutline(const bool)
void Pawn::toggleOutline(const bool toggle) {
  if (toggle) {
    outline_visible = true;
    object.setOutlineColor(transparent);
  } else {
    outline_visible = false;
    object.setOutlineColor(outline_color);
  }

  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: toggleHighlight(const bool)
void Pawn::toggleHighlight(const bool toggle) {
  if (toggle) {
    pawn_higlighted = true;
    object.setOutlineColor(highlight_color);
  } else {
    pawn_higlighted = false;
    object.setOutlineColor(outline_color);
  }

  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: toggleVisible(const bool)
void Pawn::toggleVisible(const bool toggle) {
  if (toggle) {
    pawn_visible = true;
    object.setFillColor(pawn_color);
    object.setOutlineColor(outline_color);
  } else {
    pawn_visible = false;
    object.setFillColor(transparent);
    object.setOutlineColor(transparent);
  }

  return;
}
////////////////////////////////////////////////////////////////////////////////////////

// TODO - Mutators //
////////////////////////////////////////////////////////////////////////////////////////
//&* @public: setOrigin(const Vector2f)
void Pawn::setOrigin(const Vector2f origin) {
  object.setOrigin(origin);
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: setPosition(const Vector2f)
void Pawn::setPosition(const Vector2f position) {
  object.setPosition(position);
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//&* @public: setRadius(const float)
void Pawn::setRadius(const float radius) {
  object.setRadius(radius);
  object.setOrigin({object.getRadius() / 2.f, object.getRadius() / 2.f});
  object.setPointCount(object.getRadius() * 2.f); 
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: setOutlineThickness(const float)
void Pawn::setOutlineThickness(const float thickness) {
  object.setOutlineThickness(thickness);
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: setBackgroundColor(const Color)
void Pawn::setBackgroundColor(const Color color) {
  pawn_color = color;
  object.setFillColor(pawn_color);
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: setOutlineColor(const Color)
void Pawn::setOutlineColor(const Color color) {
  outline_color = color;
  object.setOutlineColor(outline_color);
  return;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: setHighlightColor(const Color)
void Pawn::setHighlightColor(const Color color) {
  highlight_color = color;
  return;
}
////////////////////////////////////////////////////////////////////////////////////////

// TODO - Accessors //
////////////////////////////////////////////////////////////////////////////////////////
//&* @public: getRadius(void)
float Pawn::getRadius(void) { return object.getRadius(); }
////////////////////////////////////////////////////////////////////////////////////////

// TODO - Switches //
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: isVisible(void)
bool Pawn::isVisible(void) {
  if (pawn_visible)
    return true;

  return false;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: isHighlighted(void)
bool Pawn::isHighlighted(void) { return false; }
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// &* @public: inLocalBounds(const Vector2f)
bool Pawn::inLocalBounds(const Vector2f mousePos) {
  if (object.getGlobalBounds().contains(mousePos))
    return true;

  return false;
}
////////////////////////////////////////////////////////////////////////////////////////
