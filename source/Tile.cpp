#include "../includes/Objects/Tile.h"

// TODO - Resources //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: Tile(const Color, const Vector2f) | should we alter position to
// size?
Tile::Tile(const Color color, const Vector2f position)
    : object_color(color), outline_color(transparent), highlight_color(yellow),
      tile_highlighted(false), tile_visible(true), outline_visible(false) {

  //* init object
  object.setSize({50, 50});
  object.setOrigin(object.getSize().x / 2.f, object.getSize().y / 2.f);
  object.setPosition(position);
  object.setFillColor(object_color);
  object.setOutlineColor(outline_color);
  object.setOutlineThickness(3.f);
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: ~Tile(void)
Tile::~Tile(void) { return; }
//////////////////////////////////////////////////////////////////////////////////

// TODO - Functions //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: draw(RenderWindow&)
void Tile::draw(RenderWindow &window) {
  if (isVisible()) {
    window.draw(object);
  }
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: move(const Vector2f)
void Tile::move(const Vector2f position) {
  object.move(position);
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: resize(const unsigned int)
void Tile::resize(const unsigned int size) {
  object.setSize({static_cast<float>(size), static_cast<float>(size)});
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: invert(void)
void Tile::invert(void) {
  //? @note: swap outline & fill color
  Color temp = object_color;
  object_color = outline_color;
  outline_color = temp;

  //? @note: update object
  object.setFillColor(object_color);
  object.setOutlineColor(outline_color);

  return;
}
//////////////////////////////////////////////////////////////////////////////////

// TODO - Toggles //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: toggleOutline(const bool)
void Tile::toggleOutline(const bool toggle) {
  if (toggle) {
    outline_visible = true;
    object.setOutlineColor(outline_color);
  } else {
    outline_visible = false;
    object.setOutlineColor(transparent);
  }
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: toggleHighlight(const bool)
void Tile::toggleHighlight(const bool toggle) {
  if (toggle) {
    tile_highlighted = true;
    object.setOutlineColor(highlight_color);
  } else {
    tile_highlighted = false;
    object.setOutlineColor(outline_color);
  }

  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: toggleVisible(const bool)
void Tile::toggleVisible(const bool toggle) {
  if (toggle) {
    tile_visible = true;
    object.setFillColor(object_color);
    object.setOutlineColor(outline_color);
  } else {
    tile_visible = false;
    object.setFillColor(transparent);
    object.setOutlineColor(transparent);
  }

  return;
}
///////////////////////////////////////////////////////////////////////////////////

// TODO - Mutators //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: setOrigin(const Vector2f)
void Tile::setOrigin(const Vector2f origin) {
  object.setOrigin(origin);
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: setPosition(const Vector2f)
void Tile::setPosition(const Vector2f position) {
  object.setPosition(position);
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: setOutlineThickness(const float)
void Tile::setOutlineThickness(const float thickness) {
  object.setOutlineThickness(thickness);
  return;
}
//////////////////////////////////////////////////////////////////////////////////s
//////////////////////////////////////////////////////////////////////////////////
//&* @public: setBackgroundColor(const Color)
void Tile::setBackgroundColor(const Color color) {
  object_color = color;
  object.setFillColor(object_color);
  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: setOutlineColor(const Color)
void Tile::setOutlineColor(const Color color) {
  object.setOutlineColor(color);
  outline_visible = true;

  return;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: setHighlightColor(const Color)
void Tile::setHighlightColor(const Color color) {
  highlight_color = color;
  return;
}
//////////////////////////////////////////////////////////////////////////////////

// TODO - Accessors //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: getOrigin(void)

const Vector2f Tile::getOrigin(void) { return object.getOrigin(); }
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//&* @public: getPosition(void)
const Vector2f Tile::getPosition(void) { return object.getPosition(); }
//////////////////////////////////////////////////////////////////////////////////

// TODO - Switches //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: isVisible(void)
bool Tile::isVisible(void) {
  if (tile_visible)
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: isHighlighted(void)
bool Tile::isHighlighted(void) {
  if (tile_highlighted)
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//&* @public: inLocalBounds(const Vector2f)
bool Tile::inLocalBounds(const Vector2f position) {
  if (object.getGlobalBounds().contains(position))
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////

// TODO - Overloads //
//////////////////////////////////////////////////////////////////////////////////
//&* @public: operator=(const Tile&)
Tile &Tile::operator=(const Tile &other) {
  this->object_color = other.object_color;
  this->outline_color = other.outline_color;
  this->highlight_color = other.highlight_color;
  this->tile_highlighted = other.tile_highlighted;
  this->tile_visible = other.tile_visible;
  this->outline_visible = other.outline_visible;

  //* init object
  this->object.setSize(other.object.getSize());
  this->object.setOrigin(other.object.getOrigin());
  this->object.setPosition(other.object.getPosition());
  this->object.setFillColor(object_color);
  this->object.setOutlineColor(outline_color);
  this->object.setOutlineThickness(other.object.getOutlineThickness());

  return *this; 
}
//////////////////////////////////////////////////////////////////////////////////
