#include "../includes/Objects/Tile.h"
#include <SFML/System/Vector2.hpp>

// TODO: Resources
//////////////////////////////////////////////////////////////////////////////////
//* @public: Tile(const Color, const Vector2f)
Tile::Tile(const Color color, const Vector2f position)
    : rectangle_color(color), outline_color(transparent), tile_visible(true),
      outline_visible(false) {

  //* init rectangle
  rectangle.setSize({50, 50});
  rectangle.setOrigin(rectangle.getSize().x / 2.f, rectangle.getSize().y / 2.f);
  rectangle.setPosition(position);
  rectangle.setFillColor(rectangle_color);
  rectangle.setOutlineColor(outline_color);
  rectangle.setOutlineThickness(3.f);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: ~Tile(void)
Tile::~Tile(void) { return; }
//////////////////////////////////////////////////////////////////////////////////

// TODO: Functions
//////////////////////////////////////////////////////////////////////////////////
//* @public: draw(RenderWindow&)
void Tile::draw(RenderWindow &window) {
  if (isVisible()) {
    window.draw(rectangle);
  }
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: move(const Vector2f)
void Tile::move(const Vector2f position) {
  rectangle.move(position);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: show(void)
void Tile::show(void) {
  //? @note: don't alter outline_visible
  tile_visible = true;
  rectangle.setFillColor(rectangle_color);
  rectangle.setOutlineColor(outline_color);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: hide(void)
void Tile::hide(void) {
  //? @note:
  tile_visible = false;
  rectangle.setFillColor(transparent);
  rectangle.setOutlineColor(transparent);

  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: resize(const Vector2f)
void Tile::resize(const Vector2f size) {
  rectangle.setSize(size);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: invert(void)
void Tile::invert(void) {
  //? @note: swap outline & fill color
  Color temp = rectangle_color;
  rectangle_color = outline_color;
  outline_color = temp;

  //? @note: update rectangle
  rectangle.setFillColor(rectangle_color);
  rectangle.setOutlineColor(outline_color);

  return;
}
//////////////////////////////////////////////////////////////////////////////////

// TODO:  Mutators
//////////////////////////////////////////////////////////////////////////////////
//* @public: setPosition(const Vector2f)
void Tile::setPosition(const Vector2f position) {
  rectangle.setPosition(position);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: setBackgroundColor(const Color)
void Tile::setBackgroundColor(const Color color) {
  rectangle.setFillColor(color);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: setOutlineColor(const Color)
void Tile::setOutlineColor(const Color color) {
  rectangle.setOutlineColor(color);
  outline_visible = true;

  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: setOutlineThickness(const float)
void Tile::setOutlineThickness(const float thickness) {
  rectangle.setOutlineThickness(thickness);
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: toggleOutline(const bool)
void Tile::toggleOutline(const bool toggle) {
  if (toggle) {
    outline_visible = true;
    rectangle.setOutlineColor(outline_color);
  } else {
    outline_visible = false;
    rectangle.setOutlineColor(transparent);
  }
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: setHighlightColor(const Color)
void Tile::setHighlightColor(const Color color) {
  highlight_color = color;
  return;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: toggleHighlight(const bool)
void Tile::toggleHighlight(const bool toggle) {
  if (toggle) {

  } else {
  }

  return;
}
//////////////////////////////////////////////////////////////////////////////////

// TODO: Accessors
//////////////////////////////////////////////////////////////////////////////////
//* @public: isVisible(void)
bool Tile::isVisible(void) {
  if (tile_visible)
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: isHighlighted(void)
bool Tile::isHighlighted(void) {
  if (tile_highlighted)
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public: inLocalBounds(const Vector2f)
bool Tile::inLocalBounds(const Vector2f position) {
  if (rectangle.getGlobalBounds().contains(position))
    return true;

  return false;
}
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//* @public:
//////////////////////////////////////////////////////////////////////////////////
