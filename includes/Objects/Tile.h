#pragma once
#include "../Master/master.h"
#include <SFML/System/Vector2.hpp>

//& Class - Tile | add to makefile...
class Tile {
private:
  //&* Components
  RectangleShape rectangle; //&* @var: rectangle

  //&* Trackers
  Color rectangle_color; //&* @var: rectangle_color
  Color outline_color;   //&* @var: outline_color
  Color highlight_color; //&* @var: highlight_color
  bool tile_highlighted; //&* @var: tile_highlighted
  bool tile_visible;     //&* @var: tile_visible
  bool outline_visible;  //&* @var: outline_visible

  //&* Friends

protected:
public:
  // TODO: Resources
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: Tile(const Color, const Vector2f)
  //* @def: constructor

  Tile(const Color = black,
       const Vector2f = {static_cast<float>(_DisplayWidth / 2),
                         static_cast<float>(_DisplayHeight / 2)});
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: ~Tile(void)
  //* @def: destructor

  ~Tile(void);
  //////////////////////////////////////////////////////////////////////////////////

  // TODO: Functions
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: draw(RenderWindow&)
  //* @def: draws tile components

  void draw(RenderWindow &);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: move(const Vector2f)
  //* @def: moves tile to designated position

  void move(const Vector2f);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: show(void)
  //* @def: shows tile

  void show(void);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: hide(void)
  //* @def: hides tile

  void hide(void);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: resize(const unsigned int)
  //* @def: resizes tile to designated size

  void resize(const unsigned int);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: invert(void)
  //* @def: swaps outline color & fill color of tile

  void invert(void);
  //////////////////////////////////////////////////////////////////////////////////

  // TODO: Mutators
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: setPosition(const Vector2f)
  //* @def: sets position of tile

  void setPosition(const Vector2f);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: setBackgroundColor(const Color)
  //* @def: sets tile background color to param

  void setBackgroundColor(const Color);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: setOutlineColor(const Color)
  //* @def: sets tile outline color to parama

  void setOutlineColor(const Color);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: setOutlineThickness(const float)
  //* @def: sets tile outline thickness to param

  void setOutlineThickness(const float);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: toggleOutline(const bool)
  //* @def: true = display, false = hidden

  void toggleOutline(const bool);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: setHighlightColor(const Color)
  //* @def: sets highlighter color to param

  void setHighlightColor(const Color);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: toggleHighlight(const bool)
  //* @def: true = highlight, false = hidden

  void toggleHighlight(const bool);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: toggleVisible(const bool)
  //* @def: true = visible, false = hidden

  void toggleVisible(const bool); 
  //////////////////////////////////////////////////////////////////////////////////
  

  // TODO: Accessors
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: isVisible(void)
  //* @def: returns true if visible

  bool isVisible(void);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: isHighlighted(void)
  //* @def:

  bool isHighlighted(void);
  //////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////
  //* @public: inLocalBounds(const Vector2f)
  //* @def: returns true if param is within local bounds

  bool inLocalBounds(const Vector2f);
  //////////////////////////////////////////////////////////////////////////////////
};