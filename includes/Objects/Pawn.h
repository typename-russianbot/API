#pragma once
#include "../Master/master.h"

//& Class - Pawn
class Pawn {
private:
  //&* Components
  CircleShape object; //&* @var: object

  //&* Trackers
  Color pawn_color;    //&* @var: object_color
  Color outline_color;   //&* @var: outline_color
  Color highlight_color; //&* @var: highlight_color
  bool pawn_higlighted;  //&* @var: pawn_highlighted
  bool pawn_visible;     //&* @var: pawn_visible
  bool outline_visible;  //&* @var: outline_visible

protected:
public:
  // TODO - Resources //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: Pawn(const Color, const Vector2f)
  //* @def: constructor
  Pawn(const Color = white, const unsigned int = 50);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: ~Pawn(void)
  //* @def: destructor
  ~Pawn(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Functions //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: draw(RenderWindow&)
  //* @def: draws pawn

  void draw(RenderWindow &);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: move(const Vector2f)
  //* @def: moves pawn

  void move(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: resize(const unsigned int)
  //* @def: resizes pawn

  void resize(const unsigned int);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: invert(void)
  //* @def: swaps outline & fill color

  void invert(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Toggles //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleOutline(const bool)
  //* @def: true = visible, false = hidden

  void toggleOutline(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleHighlight(const bool)
  //* @def: true = visible, false = hidden

  void toggleHighlight(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleVisible(const bool)
  //* @def: true = visible, false = hidden

  void toggleVisible(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Mutators //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setPosition(const Vector2f)
  //* @def: sets object position

  void setPosition(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setOutlineThickness(const float)
  //* @def: sets object outline thickness

  void setOutlineThickness(const float);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  // &* @public: setBackgroundColor(const Color)
  //* @def: sets object background color

  void setBackgroundColor(const Color);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  // &* @public: setOutlineColor(const Color)
  //* @def: sets object outline color

  void setOutlineColor(const Color);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setHighlightColor
  //* @def: sets object highlight color

  void setHighlightColor(const Color);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Accessors //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: isVisible(void)
  //* @def: returns true if visible, false if hidden

  bool isVisible(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: isHighlighted(void)
  //* @def: returns true if highlighted, false otherwise

  bool isHighlighted(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: inLocalBounds(const Vector2f)
  //* @def: returns true if param is within local bounds, false otherwise

  bool inLocalBounds(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
};