#pragma once
#include "../Objects/Pawn.h"
#include "Board.h"

//& Class - Player
class Player {
private:
  //&* Components
  Pawn pawns[12]; //&* @var: pawns

  //&* Trackers
  unsigned int remaining_pawns; //&* @var: remaining_pawns
  bool active_pawns[12];        //&* @var: active_pawns
  Color pawn_color;             //&* @var: pawn_color

protected:
public:
  // TODO - Resources //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: Player(Board&, const Color)
  //* @def: constructor

  Player(Board &, const Color = white);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: ~Player(void)
  //* @def: destructor

  ~Player(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Functions //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: draw(RenderWindow&)
  //* @def: draws player pawns

  void draw(RenderWindow &);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: movePawn(const unsigned int, const Vector2f)
  //* @def: moves designated pawn to designated position

  void movePawn(const unsigned int, const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: removePawn(const int)
  //* @def: sets active_pawns[int] to false & iterates

  void removePawn(const int);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Toggles //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleVisible(const bool)
  //* @def: toggles all active pawns visible or hidden

  void toggleVisible(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleStatus(const bool)
  //* @def:

  void toggleStatus(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Mutators //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setPawnColor(const Color)
  //* @def: sets fill color of pawn

  void setPawnColor(const Color);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: selectOrigin()
  //* @def
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: selectDestination()
  //* @def
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Accessors //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: getPawn(const unsigned int)
  //* @def: returns designated pawn

  Pawn getPawn(const unsigned int);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: getPawnsRemaining(void)
  //* @def: returns the current number of pawns

  unsigned int getPawnsRemaining(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: getPawnColor(void)
  //* @def: returns fill color of pawn

  Color getPawnColor(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Overloads //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public:
  //* @def:

  ////////////////////////////////////////////////////////////////////////////////////////
};