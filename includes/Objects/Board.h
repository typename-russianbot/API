#pragma once
#include "Tile.h"
// //& Struct - Pattern
// struct Pattern {
//   //&* Components
//   Color colorA; //&* @var: colorA
//   Color colorB; //&* @var: colorB

//   //&* Functions
// };

//& Class - Board
class Board {
private:
  //&* Components
  Tile tiles[8][8]; //&* @var: tiles

  //&* Trackers
  Color color1;       //&* @var: color1
  Color color2;       //&* @var: color2
  bool board_visible; //&* @var: board_visible

protected:
public:
  // TODO: Resources
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: Board(const unsigned int)
  //* @def: constructor

  Board(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: ~Board(void)
  //* @def: destructor

  ~Board(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO: Functions
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: draw(RenderWindow&)
  //* @def: draws board components

  void draw(RenderWindow &);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: move(const Vector2f)
  //* @def: moves board to designated position

  void move(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: show(void)
  //* @def: displays board

  void show(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: hide(void)
  //* @def: hides board

  void hide(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: resize(const unsigned int)
  //* @def: resizes board

  void resize(const unsigned int);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: invert(void)
  //* @def: swaps color1 & color2

  void invert(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO: Mutators
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: toggleHighlight(const bool)
  //* @def: true = highlighted, false = hidden

  void toggleHighlight(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: toggleVisible(const bool)
  //* @def: true = visible, false = hidden

  void toggleVisible(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO: Accessors
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: isVisible(void)
  //* @def: true if visible, false otherwise

  bool isVisible(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: isHighlighted(void)
  //* @def:

  bool isHighlighted(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //* @public: inLocalBounds(void)
  //* @def:

  bool inLocalBounds(void);
  ////////////////////////////////////////////////////////////////////////////////////////
};