#pragma once
#include "Tile.h" //* Alter tiles so they're marked : either 0=neutral, 1=player1, 2=player2

//& Class - Board
//? @note: reset origin for easier positioning
class Board {
private:
  //&* Components
  Tile grid[8][8]; //&* @var: grid

  //&* Trackers
  Pattern pattern; //&* @var: pattern
  bool visible;    //&* @var: visible

protected:
public:
  // TODO - Resources //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: Board(const Vector2f)
  //* @def: constructor

  Board(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: ~Board(void)
  //* @def: destructor

  ~Board(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Functions //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: draw(RenderWindow&)
  //* @def: draws board components

  void draw(RenderWindow &);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: move(const Vector2f)
  //* @def: moves board to designated position

  void move(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: resize(const float)
  //* @def: resizes board

  void resize(const float);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: invert(void)
  //* @def: swaps color1 & color2

  void invert(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Mutators/Accessors //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setPattern(const Color, const Color)
  //* @def: sets colorA & colorB

  void setPattern(const Pattern = {white, black});
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setCell(const Vector2u, const TileState, const int)
  //* @def: sets designated cell

  void setCell(const Vector2u, const TileState, const int);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: getPattern(void)
  //* @def: returns board pattern

  const Pattern getPattern(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: getCell(const Vector2u)
  //* @def: returns requested cell

  const Tile getCell(const Vector2u);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Toggles/Switches //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleVisible(const bool)
  //* @def: true = visible, false = hidden

  void toggleVisible(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleHighlight(const Vector2f)
  //* @def: true = highlighted, false = unhighlighted

  void toggleHighlight(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: isVisible(void)
  //* @def: true = visible, false = hidden

  bool isVisible(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: inLocalBounds(const Vector2f)
  //* @def: true = within bounds, false = out of bounds

  bool inLocalBounds(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
};