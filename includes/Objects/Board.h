#pragma once
#include "Tile.h"

//& Class - Board
//? @note: reset origin for easier positioning
class Board {
private:
  //&* Components
  Tile tiles[8][8]; //&* @var: tiles

  //&* Trackers
  Color colorA;            //&* @var: colorA
  Color colorB;            //&* @var: colorB
  bool board_visible;      //&* @var: board_visible
  bool active_tiles[8][8]; //&* @var: active_tiles

protected:
public:
  // TODO - Resources //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: Board(const unsigned int)
  //* @def: constructor

  Board(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: ~Board(void)
  //* @def: destructor

  ~Board(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Functions //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: draw(RenderWindow&)
  //* @def: draws board components

  void draw(RenderWindow &);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: move(const Vector2f)
  //* @def: moves board to designated position

  void move(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: resize(const float)
  //* @def: resizes board

  void resize(const float);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: invert(void)
  //* @def: swaps color1 & color2

  void invert(void);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Toggles //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleHighlight(const Vector2f)
  //* @def: true = highlighted, false = hidden

  void toggleHighlight(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: toggleVisible(const bool)
  //* @def: true = visible, false = hidden

  void toggleVisible(const bool);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Mutators //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setPattern(const Color, const Color)
  //* @def: sets colorA & colorB

  void setPattern(const Color = white, const Color = black);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: setActive(const Vector2u)
  //* @def:

  void setActive(const Vector2u);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Accessors //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: getCell(const Vector2u)
  //* @def: returns requested cell

  const Tile getCell(const Vector2u);
  ////////////////////////////////////////////////////////////////////////////////////////

  // TODO - Switches //
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: isVisible(void)
  //* @def: true if visible, false otherwise

  bool isVisible(void);
  ////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////
  //&* @public: inLocalBounds(const Vector2f)
  //* @def: true if within bounds, false otherwise

  bool inLocalBounds(const Vector2f);
  ////////////////////////////////////////////////////////////////////////////////////////
};